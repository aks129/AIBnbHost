import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useToast } from '@/hooks/use-toast';
import { MessageSquare, Send, Bot, User as UserIcon, AlertCircle, CheckCircle } from 'lucide-react';
import { format } from 'date-fns';
import Navigation from '@/components/navigation';

interface Message {
  id: string;
  conversationId: string;
  sender: 'guest' | 'host' | 'ai';
  content: string;
  timestamp: string;
  isAutoGenerated?: boolean;
}

interface Conversation {
  id: string;
  guestName: string;
  guestEmail: string;
  propertyName: string;
  lastMessage: string;
  lastMessageTime: string;
  unreadCount: number;
  status: 'active' | 'resolved';
  intent?: {
    category: string;
    urgency: 'low' | 'medium' | 'high';
    requiresHostAttention: boolean;
  };
}

export default function ConversationsPage() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);
  const [messageText, setMessageText] = useState('');
  const [useAI, setUseAI] = useState(true);

  const { data: conversations = [] } = useQuery<Conversation[]>({
    queryKey: ['/api/conversations'],
  });

  const { data: messages = [] } = useQuery<Message[]>({
    queryKey: ['/api/conversations', selectedConversation, 'messages'],
    enabled: !!selectedConversation,
  });

  const sendMessageMutation = useMutation({
    mutationFn: async (data: { conversationId: string; content: string; useAI: boolean }) => {
      const response = await fetch(`/api/conversations/${data.conversationId}/messages`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content: data.content, useAI: data.useAI }),
      });
      if (!response.ok) throw new Error('Failed to send message');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });
      if (selectedConversation) {
        queryClient.invalidateQueries({
          queryKey: ['/api/conversations', selectedConversation, 'messages']
        });
      }
      setMessageText('');
      toast({ title: 'Message sent successfully' });
    },
  });

  const generateAIReplyMutation = useMutation({
    mutationFn: async (conversationId: string) => {
      const response = await fetch(`/api/conversations/${conversationId}/generate-reply`, {
        method: 'POST',
      });
      if (!response.ok) throw new Error('Failed to generate reply');
      return response.json();
    },
    onSuccess: (data) => {
      setMessageText(data.reply);
      toast({ title: 'AI reply generated', description: 'Review and edit before sending' });
    },
  });

  const selectedConv = conversations.find(c => c.id === selectedConversation);

  const getUrgencyColor = (urgency?: string) => {
    switch (urgency) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const handleSendMessage = () => {
    if (!selectedConversation || !messageText.trim()) return;
    sendMessageMutation.mutate({
      conversationId: selectedConversation,
      content: messageText,
      useAI: false,
    });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />

      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Guest Conversations</h1>
          <p className="text-gray-600">Manage guest messages with AI-powered assistance</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-250px)]">
          {/* Conversations List */}
          <Card className="lg:col-span-1">
            <CardHeader>
              <CardTitle>Conversations</CardTitle>
              <CardDescription>{conversations.length} active conversations</CardDescription>
            </CardHeader>
            <CardContent className="p-0">
              <ScrollArea className="h-[calc(100vh-400px)]">
                {conversations.length === 0 ? (
                  <div className="p-8 text-center text-gray-500">
                    <MessageSquare className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                    <p>No conversations yet</p>
                  </div>
                ) : (
                  <div className="divide-y">
                    {conversations.map((conv) => (
                      <button
                        key={conv.id}
                        onClick={() => setSelectedConversation(conv.id)}
                        className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${
                          selectedConversation === conv.id ? 'bg-blue-50' : ''
                        }`}
                      >
                        <div className="flex items-start justify-between mb-2">
                          <div className="flex items-center gap-2">
                            <Avatar className="h-8 w-8">
                              <AvatarFallback>{conv.guestName[0]}</AvatarFallback>
                            </Avatar>
                            <div>
                              <div className="font-semibold text-sm">{conv.guestName}</div>
                              <div className="text-xs text-gray-500">{conv.propertyName}</div>
                            </div>
                          </div>
                          {conv.unreadCount > 0 && (
                            <Badge className="bg-blue-600">{conv.unreadCount}</Badge>
                          )}
                        </div>
                        <p className="text-sm text-gray-600 truncate mb-2">{conv.lastMessage}</p>
                        <div className="flex items-center justify-between">
                          <span className="text-xs text-gray-400">
                            {format(new Date(conv.lastMessageTime), 'MMM d, h:mm a')}
                          </span>
                          {conv.intent && (
                            <Badge className={getUrgencyColor(conv.intent.urgency)}>
                              {conv.intent.urgency}
                            </Badge>
                          )}
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </ScrollArea>
            </CardContent>
          </Card>

          {/* Messages */}
          <Card className="lg:col-span-2">
            {selectedConv ? (
              <>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="flex items-center gap-2">
                        {selectedConv.guestName}
                        {selectedConv.intent?.requiresHostAttention && (
                          <Badge variant="destructive">
                            <AlertCircle className="h-3 w-3 mr-1" />
                            Needs Attention
                          </Badge>
                        )}
                      </CardTitle>
                      <CardDescription>
                        {selectedConv.propertyName} â€¢ {selectedConv.guestEmail}
                      </CardDescription>
                    </div>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => generateAIReplyMutation.mutate(selectedConv.id)}
                      disabled={generateAIReplyMutation.isPending}
                    >
                      <Bot className="h-4 w-4 mr-2" />
                      Generate AI Reply
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-[calc(100vh-550px)] mb-4">
                    <div className="space-y-4 pr-4">
                      {messages.map((message) => (
                        <div
                          key={message.id}
                          className={`flex ${
                            message.sender === 'guest' ? 'justify-start' : 'justify-end'
                          }`}
                        >
                          <div
                            className={`max-w-[80%] rounded-lg p-4 ${
                              message.sender === 'guest'
                                ? 'bg-gray-100'
                                : message.sender === 'ai'
                                ? 'bg-purple-100'
                                : 'bg-blue-100'
                            }`}
                          >
                            <div className="flex items-center gap-2 mb-2">
                              {message.sender === 'guest' ? (
                                <UserIcon className="h-4 w-4" />
                              ) : message.sender === 'ai' ? (
                                <Bot className="h-4 w-4" />
                              ) : (
                                <CheckCircle className="h-4 w-4" />
                              )}
                              <span className="text-xs font-semibold">
                                {message.sender === 'guest'
                                  ? selectedConv.guestName
                                  : message.sender === 'ai'
                                  ? 'AI Assistant'
                                  : 'You'}
                              </span>
                              <span className="text-xs text-gray-500">
                                {format(new Date(message.timestamp), 'h:mm a')}
                              </span>
                            </div>
                            <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </ScrollArea>

                  <div className="space-y-2">
                    <Textarea
                      value={messageText}
                      onChange={(e) => setMessageText(e.target.value)}
                      placeholder="Type your message..."
                      rows={3}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault();
                          handleSendMessage();
                        }
                      }}
                    />
                    <div className="flex justify-between">
                      <div className="text-xs text-gray-500">
                        Press Enter to send, Shift+Enter for new line
                      </div>
                      <Button onClick={handleSendMessage} disabled={!messageText.trim()}>
                        <Send className="h-4 w-4 mr-2" />
                        Send
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </>
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="text-center text-gray-500">
                  <MessageSquare className="h-16 w-16 mx-auto mb-4 text-gray-400" />
                  <p>Select a conversation to view messages</p>
                </div>
              </div>
            )}
          </Card>
        </div>
      </div>
    </div>
  );
}
